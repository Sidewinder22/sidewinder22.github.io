{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/assets/images/cpp20_without_modules.png","path":"assets/images/cpp20_without_modules.png","modified":0,"renderable":0},{"_id":"source/assets/images/sfe_screenshot.png","path":"assets/images/sfe_screenshot.png","modified":0,"renderable":0},{"_id":"themes/clean-blog/source/css/article.styl","path":"css/article.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/desk-0.jpg","path":"img/desk-0.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/desk-2.jpg","path":"img/desk-2.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/park-background.jpg","path":"img/park-background.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/cpp20-modules.md","hash":"fcbcdb170ff5e343efdea96125a6b8dd6b7800dc","modified":1696286401563},{"_id":"source/_posts/first-post.md","hash":"eca3e37d0e8e00ab5f1956922334a68fe58d7c9a","modified":1696333519985},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1696286401563},{"_id":"source/aboutme/index.md","hash":"61758e340a15dbf065ceceb7af3e99769f96f462","modified":1696331220973},{"_id":"source/assets/images/sfe_screenshot.png","hash":"1db7d4b1ce86bdabd83f787d7b4034b063680d46","modified":1696286401563},{"_id":"themes/clean-blog/LICENSE","hash":"8726b416df4f067cff579e859f05c4b594b8be09","modified":1696335036504},{"_id":"themes/clean-blog/README.md","hash":"3663228602b0a5f8941e49e7851698ea13a07eb3","modified":1696335036504},{"_id":"themes/clean-blog/_config.yml","hash":"2c84554d0e0ee951f151086fba1483b9d3f97d63","modified":1696333624465},{"_id":"themes/clean-blog/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1696335036504},{"_id":"themes/clean-blog/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1696335036504},{"_id":"themes/clean-blog/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1696335036504},{"_id":"themes/clean-blog/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1696335036504},{"_id":"themes/clean-blog/languages/fr.yml","hash":"e9e6f7cb362ebb7997f11027498a2748fe3bac95","modified":1696335036504},{"_id":"themes/clean-blog/languages/ko.yml","hash":"40b97194caa097cbc037a79c86530be132743920","modified":1696335036504},{"_id":"themes/clean-blog/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1696335036504},{"_id":"themes/clean-blog/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1696335036504},{"_id":"themes/clean-blog/languages/pt.yml","hash":"1d0c3689eb32fe13f37f8f6f303af7624ebfbaf0","modified":1696335036504},{"_id":"themes/clean-blog/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1696335036504},{"_id":"themes/clean-blog/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1696335036504},{"_id":"themes/clean-blog/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1696335036504},{"_id":"themes/clean-blog/layout/archive.ejs","hash":"3492fc8ec76f49eb05fa4c0d48db46b76f04805c","modified":1696335036504},{"_id":"themes/clean-blog/layout/index.ejs","hash":"41b0fec1a9049518040dc6fb4857659485ed5136","modified":1696335036504},{"_id":"themes/clean-blog/layout/layout.ejs","hash":"da2f9018047924ddaf376aee5996c7ddc06cebc1","modified":1696335036504},{"_id":"themes/clean-blog/layout/page.ejs","hash":"9e6c5704b26a6732a42f01bd09635b3b81909403","modified":1696335036504},{"_id":"themes/clean-blog/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1696335036504},{"_id":"themes/clean-blog/layout/_partial/after-footer.ejs","hash":"80970a6cfbf9b1abe0c472636b321a9be08fdc43","modified":1696335036504},{"_id":"themes/clean-blog/layout/_partial/article-archive.ejs","hash":"3d8d98c6545b8332a6d6ed4f8b00327df03ea945","modified":1696335036504},{"_id":"themes/clean-blog/layout/_partial/article-categories.ejs","hash":"5a0bf5a20f670621d8013c9b9d7976b45c8aa80f","modified":1696335036504},{"_id":"themes/clean-blog/layout/_partial/article-full.ejs","hash":"f78ff5eedf9045148ee255d5387a05a7000a7a47","modified":1696335036504},{"_id":"themes/clean-blog/layout/_partial/article-index.ejs","hash":"e433df4e245e2d4c628052c6e59966563542d94d","modified":1696335036504},{"_id":"themes/clean-blog/layout/_partial/article-tags.ejs","hash":"6136434be09056c1466149cecb3cc2e80d107999","modified":1696335036504},{"_id":"themes/clean-blog/layout/_partial/footer.ejs","hash":"d252fb1a41890e6481bb054f9cc4ceec3c0b0ed9","modified":1696335036504},{"_id":"themes/clean-blog/layout/_partial/comments.ejs","hash":"3fedb75436439d1d6979b7e4d20d48a593e12be4","modified":1696335036504},{"_id":"themes/clean-blog/layout/_partial/gallery.ejs","hash":"21e4f28909f4a79ff7d9f10bdfef6a8cb11632bf","modified":1696335036504},{"_id":"themes/clean-blog/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1696335036504},{"_id":"themes/clean-blog/layout/_partial/head.ejs","hash":"3ccfc84e3ed67415fe71a1767d5e77a6b1f84a7a","modified":1696335036504},{"_id":"themes/clean-blog/layout/_partial/menu.ejs","hash":"ba299316400499e9ede154e9627cafb7ce411888","modified":1696335036504},{"_id":"themes/clean-blog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1696335036504},{"_id":"themes/clean-blog/layout/_partial/tag-category-index.ejs","hash":"10cdc1b7866999c714a666557c150d2c79c1fba9","modified":1696335036504},{"_id":"themes/clean-blog/source/css/article.styl","hash":"f5294d7a3d6127fcb287de3ff0c12aebb1766c7b","modified":1696335036504},{"_id":"themes/clean-blog/source/css/base.styl","hash":"0b54825903d08b5f7f7fe95ef4261c90e980abdb","modified":1696335036504},{"_id":"themes/clean-blog/source/css/mixins.styl","hash":"892f55e8a71f2e23a52e48e217dad3303bbad913","modified":1696335036504},{"_id":"themes/clean-blog/source/css/style.styl","hash":"c40dc495a41007d21c59f342ee42b2d31d7b5ff4","modified":1696335036504},{"_id":"themes/clean-blog/source/css/variables.styl","hash":"cd82df5ca8dfbcfec12d833f01adfac00878e835","modified":1696335036504},{"_id":"themes/clean-blog/source/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1696335036504},{"_id":"themes/clean-blog/source/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1696335036504},{"_id":"source/assets/images/cpp20_without_modules.png","hash":"cea1968fcdc59caa8d90f959cbbe66e33cf648be","modified":1696286401563},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1696335036504},{"_id":"themes/clean-blog/source/img/desk-2.jpg","hash":"a066f0bc9e3ee14b593aa56389efd808adeb0cd8","modified":1677522876000},{"_id":"themes/clean-blog/source/img/desk-0.jpg","hash":"50058201893114de3053fcc8c147439d759c1eb1","modified":1677522422000},{"_id":"themes/clean-blog/source/img/park-background.jpg","hash":"aa06db0e944f8379d855020485e536a14f5e8029","modified":1677520084000},{"_id":"public/aboutme/index.html","hash":"8d859e6ef84e1db9065aed4be60ab1145af8bee3","modified":1696333300228},{"_id":"public/2023/10/03/hello-world/index.html","hash":"77835312a6568639392b2684ca359be92a9417e1","modified":1696333300228},{"_id":"public/2023/09/01/first-post/index.html","hash":"f6831052c71b11d0d0aa651a72bf68c65ea0e3bc","modified":1696333300228},{"_id":"public/archives/index.html","hash":"73b785d2e8ddf6808228d8074dba11347f2a1764","modified":1696333300228},{"_id":"public/archives/2023/index.html","hash":"1d6fe528ddc39c6fa9ed1726b7b549e482b4844a","modified":1696333300228},{"_id":"public/archives/2023/09/index.html","hash":"89526e14bea1350e763b37de254aff719d38b8a9","modified":1696333300228},{"_id":"public/archives/2023/10/index.html","hash":"1cdeeb7d3590c8bbf29a4c53e39c0b99dac8b188","modified":1696333300228},{"_id":"public/index.html","hash":"e43a0f570ccf094d314bef854ef3e70279151cd7","modified":1696333300228},{"_id":"public/tags/c-20-c/index.html","hash":"e866e74d7da4331ecfc975471632454f71974e15","modified":1696333300228},{"_id":"public/2023/09/29/cpp20-modules/index.html","hash":"0699457644079bb3344e61cf15758dc5fa29be95","modified":1696333300228},{"_id":"public/assets/images/sfe_screenshot.png","hash":"1db7d4b1ce86bdabd83f787d7b4034b063680d46","modified":1696333300228},{"_id":"public/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1696333300228},{"_id":"public/css/article.css","hash":"f0ee490e1207191946fffc9444f891e9b7ae7289","modified":1696333300228},{"_id":"public/css/base.css","hash":"91b6c032be9e146dfd68880fe79f77f5d2771b0f","modified":1696333300228},{"_id":"public/css/mixins.css","hash":"45146e7f4346351cd7f364de344aecf9574475f9","modified":1696333300228},{"_id":"public/css/style.css","hash":"029be79fde48199c77c76dbaac80cec3715f0bc8","modified":1696333300228},{"_id":"public/css/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1696333300228},{"_id":"public/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1696333300228},{"_id":"public/assets/images/cpp20_without_modules.png","hash":"cea1968fcdc59caa8d90f959cbbe66e33cf648be","modified":1696333300228},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1696333300228},{"_id":"public/img/desk-2.jpg","hash":"a066f0bc9e3ee14b593aa56389efd808adeb0cd8","modified":1696333300228},{"_id":"public/img/desk-0.jpg","hash":"50058201893114de3053fcc8c147439d759c1eb1","modified":1696333300228},{"_id":"public/img/park-background.jpg","hash":"aa06db0e944f8379d855020485e536a14f5e8029","modified":1696333300228}],"Category":[],"Data":[],"Page":[{"title":"O mnie","date":"2023-10-03T10:36:01.000Z","_content":"\n# Krótki wstęp\n\nCześć! Nazywam się Damian Stępień (Sidewinder22). Jestem przede wszystkim programistą języka C++.\n\nJęzyk C++ znam nieźle, ale ostatnio odczuwam pewne braki, zwłaszcza dotyczące nowszych standardów (C++17/20) i inżynierii oprogramowania. Dlatego chcę rozwijać swoją wiedzę i przy okazji podzielić się ciekawymi wpisami ze światem.\n\nTen blog pomoże mi śledzić moje postępy i usystematyzować wiedzę.\nPojawią się tu różne tematy, od C++ przez Pythona do Linuksa i może nawet coś z cyberbezpieczeństwa!\n\nWszystkie opinie wyrażone na tym blogu są tylko moimi własnymi opiniami (nie mojego pracodawcy, barmana, fryzjera, itd.).\n\n# Używane technologie\n\n- OS: Manjaro\n- IDE: QtCreator, Eclipse, Visual Studio Code i Vim\n- Powłoka: ZSH + Oh My Zsh + powerlevel10k\n- C++ (11/14/17)\n- Python\n- React.js + FastAPI\n- Klawiatura: Corsair K70 (CherryMX Blue)\n- Mysz: Logitech G502\n\n# Zainteresowania\n\n- Programowanie, Linux a także od niedawna cyberbezpieczeństwo\n- Gra na instrumentach klawiszowych\n- Czytanie książek\n- Spacery\n\n# Kontakt\n\n- e-mail: sidewinder22[at]protonmail.com\n- [Linkedin](https://www.linkedin.com/in/damian-st%C4%99pie%C5%84-29717a1b9/)\n","source":"aboutme/index.md","raw":"---\ntitle: O mnie\ndate: 2023-10-03 12:36:01\n---\n\n# Krótki wstęp\n\nCześć! Nazywam się Damian Stępień (Sidewinder22). Jestem przede wszystkim programistą języka C++.\n\nJęzyk C++ znam nieźle, ale ostatnio odczuwam pewne braki, zwłaszcza dotyczące nowszych standardów (C++17/20) i inżynierii oprogramowania. Dlatego chcę rozwijać swoją wiedzę i przy okazji podzielić się ciekawymi wpisami ze światem.\n\nTen blog pomoże mi śledzić moje postępy i usystematyzować wiedzę.\nPojawią się tu różne tematy, od C++ przez Pythona do Linuksa i może nawet coś z cyberbezpieczeństwa!\n\nWszystkie opinie wyrażone na tym blogu są tylko moimi własnymi opiniami (nie mojego pracodawcy, barmana, fryzjera, itd.).\n\n# Używane technologie\n\n- OS: Manjaro\n- IDE: QtCreator, Eclipse, Visual Studio Code i Vim\n- Powłoka: ZSH + Oh My Zsh + powerlevel10k\n- C++ (11/14/17)\n- Python\n- React.js + FastAPI\n- Klawiatura: Corsair K70 (CherryMX Blue)\n- Mysz: Logitech G502\n\n# Zainteresowania\n\n- Programowanie, Linux a także od niedawna cyberbezpieczeństwo\n- Gra na instrumentach klawiszowych\n- Czytanie książek\n- Spacery\n\n# Kontakt\n\n- e-mail: sidewinder22[at]protonmail.com\n- [Linkedin](https://www.linkedin.com/in/damian-st%C4%99pie%C5%84-29717a1b9/)\n","updated":"2023-10-03T11:07:00.973Z","path":"aboutme/index.html","comments":1,"layout":"page","_id":"clna91rjr0000osjm9ow3c9eq","content":"<h1 id=\"Krotki-wstep\"><a href=\"#Krotki-wstep\" class=\"headerlink\" title=\"Krótki wstęp\"></a>Krótki wstęp</h1><p>Cześć! Nazywam się Damian Stępień (Sidewinder22). Jestem przede wszystkim programistą języka C++.</p>\n<p>Język C++ znam nieźle, ale ostatnio odczuwam pewne braki, zwłaszcza dotyczące nowszych standardów (C++17&#x2F;20) i inżynierii oprogramowania. Dlatego chcę rozwijać swoją wiedzę i przy okazji podzielić się ciekawymi wpisami ze światem.</p>\n<p>Ten blog pomoże mi śledzić moje postępy i usystematyzować wiedzę.<br>Pojawią się tu różne tematy, od C++ przez Pythona do Linuksa i może nawet coś z cyberbezpieczeństwa!</p>\n<p>Wszystkie opinie wyrażone na tym blogu są tylko moimi własnymi opiniami (nie mojego pracodawcy, barmana, fryzjera, itd.).</p>\n<h1 id=\"Uzywane-technologie\"><a href=\"#Uzywane-technologie\" class=\"headerlink\" title=\"Używane technologie\"></a>Używane technologie</h1><ul>\n<li>OS: Manjaro</li>\n<li>IDE: QtCreator, Eclipse, Visual Studio Code i Vim</li>\n<li>Powłoka: ZSH + Oh My Zsh + powerlevel10k</li>\n<li>C++ (11&#x2F;14&#x2F;17)</li>\n<li>Python</li>\n<li>React.js + FastAPI</li>\n<li>Klawiatura: Corsair K70 (CherryMX Blue)</li>\n<li>Mysz: Logitech G502</li>\n</ul>\n<h1 id=\"Zainteresowania\"><a href=\"#Zainteresowania\" class=\"headerlink\" title=\"Zainteresowania\"></a>Zainteresowania</h1><ul>\n<li>Programowanie, Linux a także od niedawna cyberbezpieczeństwo</li>\n<li>Gra na instrumentach klawiszowych</li>\n<li>Czytanie książek</li>\n<li>Spacery</li>\n</ul>\n<h1 id=\"Kontakt\"><a href=\"#Kontakt\" class=\"headerlink\" title=\"Kontakt\"></a>Kontakt</h1><ul>\n<li>e-mail: sidewinder22[at]protonmail.com</li>\n<li><a href=\"https://www.linkedin.com/in/damian-st%C4%99pie%C5%84-29717a1b9/\">Linkedin</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Krotki-wstep\"><a href=\"#Krotki-wstep\" class=\"headerlink\" title=\"Krótki wstęp\"></a>Krótki wstęp</h1><p>Cześć! Nazywam się Damian Stępień (Sidewinder22). Jestem przede wszystkim programistą języka C++.</p>\n<p>Język C++ znam nieźle, ale ostatnio odczuwam pewne braki, zwłaszcza dotyczące nowszych standardów (C++17&#x2F;20) i inżynierii oprogramowania. Dlatego chcę rozwijać swoją wiedzę i przy okazji podzielić się ciekawymi wpisami ze światem.</p>\n<p>Ten blog pomoże mi śledzić moje postępy i usystematyzować wiedzę.<br>Pojawią się tu różne tematy, od C++ przez Pythona do Linuksa i może nawet coś z cyberbezpieczeństwa!</p>\n<p>Wszystkie opinie wyrażone na tym blogu są tylko moimi własnymi opiniami (nie mojego pracodawcy, barmana, fryzjera, itd.).</p>\n<h1 id=\"Uzywane-technologie\"><a href=\"#Uzywane-technologie\" class=\"headerlink\" title=\"Używane technologie\"></a>Używane technologie</h1><ul>\n<li>OS: Manjaro</li>\n<li>IDE: QtCreator, Eclipse, Visual Studio Code i Vim</li>\n<li>Powłoka: ZSH + Oh My Zsh + powerlevel10k</li>\n<li>C++ (11&#x2F;14&#x2F;17)</li>\n<li>Python</li>\n<li>React.js + FastAPI</li>\n<li>Klawiatura: Corsair K70 (CherryMX Blue)</li>\n<li>Mysz: Logitech G502</li>\n</ul>\n<h1 id=\"Zainteresowania\"><a href=\"#Zainteresowania\" class=\"headerlink\" title=\"Zainteresowania\"></a>Zainteresowania</h1><ul>\n<li>Programowanie, Linux a także od niedawna cyberbezpieczeństwo</li>\n<li>Gra na instrumentach klawiszowych</li>\n<li>Czytanie książek</li>\n<li>Spacery</li>\n</ul>\n<h1 id=\"Kontakt\"><a href=\"#Kontakt\" class=\"headerlink\" title=\"Kontakt\"></a>Kontakt</h1><ul>\n<li>e-mail: sidewinder22[at]protonmail.com</li>\n<li><a href=\"https://www.linkedin.com/in/damian-st%C4%99pie%C5%84-29717a1b9/\">Linkedin</a></li>\n</ul>\n"}],"Post":[{"title":"#5 C++20 – Moduły","date":"2023-09-29T13:43:27.000Z","author":"Sidewinder22","description":"Witajcie! 🙂 W końcu i na mnie przyszła pora na zapoznanie się z feature’mi ze standardu C++20.","_content":"\n\nWitajcie! 🙂\nW końcu i na mnie przyszła pora na zapoznanie się z feature’mi ze standardu C++20.\n\nDzisiaj na pierwszy ogień idą moduły z C++20. Spróbujemy sobie napisać prosty kodzik, który wyświetli nam zawartość aktualnego katalogu (taki ls z shella).\n\n# Wersja bez modułów\n\nNa początku spójrzmy na kod napisany bez użycia modułów z C++20. Będą to proste klasy Filesystem i Format, plik main.cpp i cmake.\nKlasa Filesystem zapewni nam metodę printCurrentDir(), w której do sformatowania wyjścia użyje metody cleanupOutput() z klasy Format.\n\n## Kod\n\n```cpp\n// Filesystem.hpp\n\n#ifndef FILESYSTEM_HPP_\n#define FILESYSTEM_HPP_\n\nclass Filesystem\n{\npublic:\n    void printCurrentDir();\n\nprivate:\n    static constexpr auto currentPath_ = (\".\");\n};\n\n#endif // FILESYSTEM_HPP_\n```\n\n```cpp\n// Filesystem.cpp\n\n#include <iostream>\n#include <filesystem>\n#include \"Format.hpp\"\n#include \"Filesystem.hpp\"\n\nvoid Filesystem::printCurrentDir()\n{\n    std::vector<std::string> output;\n    \n    for (auto && entry : std::filesystem::directory_iterator{currentPath_})\n    {\n        output.push_back(entry.path().c_str());\n    }\n\n    Format format;\n    auto results = format.cleanupOutput(output);\n\n    for (auto && result : results)\n    {\n        std::cout << result << \" \";\n    }\n\n    std::cout << std::endl;\n}\n```\n\n```cpp\n// Format.hpp\n\n#ifndef FORMAT_HPP_\n#define FORMAT_HPP_\n\n#include <string>\n#include <vector>\n\nclass Format\n{\npublic:\n    std::vector<std::string> cleanupOutput(std::vector<std::string>& output);\n};\n\n#endif // FORMAT_HPP_\n```\n\n```cpp\n// Format.cpp\n\n#include <algorithm>\n#include \"Format.hpp\"\n\nstd::vector<std::string> Format::cleanupOutput(std::vector<std::string>& output)\n{\n    std::vector<std::string> result;\n\n    std::transform(output.begin(), output.end(), output.begin(),\n        [](std::string entry){ return entry.substr(2); });\n\n    return output;\n}\n```\n\n\n\nW pliku <em>main.cpp</em> stworzymy sobie obiekt klasy Tools i wywołamy na nim metodę: <em>printCurrentDir()</em>, która wyświetli nam zawartość aktualnego katalogu.\n\n```cpp\n// main.cpp\n\n#include <iostream>\n#include \"Filesystem.hpp\"\n\nusing namespace std;\n\nint main()\n{\n    Filesystem filesystem;\n    filesystem.printCurrentDir();\n\n    return 0;\n}\n```\n\n```cmake\n# CmakeLists.txt\n\ncmake_minimum_required(VERSION 3.5)\n\nproject(Side-ls LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_FLAGS \"-Wall -Wextra\")\n\nadd_library(tools SHARED\n    Filesystem.cpp\n    Format.cpp\n)\n\nadd_executable(Side-ls main.cpp)\ntarget_link_libraries(Side-ls PRIVATE tools)\n\n```\n\n# Kompilacja\n\nTeraz skompilujmy nasz kod:\n\n```bash\nmkdir build && cd build && cmake ..\nmake\n./Side-ls\n```\n\nA oto output z konsoli:\n\n![cpp_without_modules](/assets/images/cpp20_without_modules.png)\n","source":"_posts/cpp20-modules.md","raw":"---\ntitle: \"#5 C++20 – Moduły\"\ndate: 2023-09-29 15:43:27\ntags: c++20 c++\nauthor:         Sidewinder22\ndescription:    \"Witajcie! 🙂 W końcu i na mnie przyszła pora na zapoznanie się z feature’mi ze standardu C++20.\"\n---\n\n\nWitajcie! 🙂\nW końcu i na mnie przyszła pora na zapoznanie się z feature’mi ze standardu C++20.\n\nDzisiaj na pierwszy ogień idą moduły z C++20. Spróbujemy sobie napisać prosty kodzik, który wyświetli nam zawartość aktualnego katalogu (taki ls z shella).\n\n# Wersja bez modułów\n\nNa początku spójrzmy na kod napisany bez użycia modułów z C++20. Będą to proste klasy Filesystem i Format, plik main.cpp i cmake.\nKlasa Filesystem zapewni nam metodę printCurrentDir(), w której do sformatowania wyjścia użyje metody cleanupOutput() z klasy Format.\n\n## Kod\n\n```cpp\n// Filesystem.hpp\n\n#ifndef FILESYSTEM_HPP_\n#define FILESYSTEM_HPP_\n\nclass Filesystem\n{\npublic:\n    void printCurrentDir();\n\nprivate:\n    static constexpr auto currentPath_ = (\".\");\n};\n\n#endif // FILESYSTEM_HPP_\n```\n\n```cpp\n// Filesystem.cpp\n\n#include <iostream>\n#include <filesystem>\n#include \"Format.hpp\"\n#include \"Filesystem.hpp\"\n\nvoid Filesystem::printCurrentDir()\n{\n    std::vector<std::string> output;\n    \n    for (auto && entry : std::filesystem::directory_iterator{currentPath_})\n    {\n        output.push_back(entry.path().c_str());\n    }\n\n    Format format;\n    auto results = format.cleanupOutput(output);\n\n    for (auto && result : results)\n    {\n        std::cout << result << \" \";\n    }\n\n    std::cout << std::endl;\n}\n```\n\n```cpp\n// Format.hpp\n\n#ifndef FORMAT_HPP_\n#define FORMAT_HPP_\n\n#include <string>\n#include <vector>\n\nclass Format\n{\npublic:\n    std::vector<std::string> cleanupOutput(std::vector<std::string>& output);\n};\n\n#endif // FORMAT_HPP_\n```\n\n```cpp\n// Format.cpp\n\n#include <algorithm>\n#include \"Format.hpp\"\n\nstd::vector<std::string> Format::cleanupOutput(std::vector<std::string>& output)\n{\n    std::vector<std::string> result;\n\n    std::transform(output.begin(), output.end(), output.begin(),\n        [](std::string entry){ return entry.substr(2); });\n\n    return output;\n}\n```\n\n\n\nW pliku <em>main.cpp</em> stworzymy sobie obiekt klasy Tools i wywołamy na nim metodę: <em>printCurrentDir()</em>, która wyświetli nam zawartość aktualnego katalogu.\n\n```cpp\n// main.cpp\n\n#include <iostream>\n#include \"Filesystem.hpp\"\n\nusing namespace std;\n\nint main()\n{\n    Filesystem filesystem;\n    filesystem.printCurrentDir();\n\n    return 0;\n}\n```\n\n```cmake\n# CmakeLists.txt\n\ncmake_minimum_required(VERSION 3.5)\n\nproject(Side-ls LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_FLAGS \"-Wall -Wextra\")\n\nadd_library(tools SHARED\n    Filesystem.cpp\n    Format.cpp\n)\n\nadd_executable(Side-ls main.cpp)\ntarget_link_libraries(Side-ls PRIVATE tools)\n\n```\n\n# Kompilacja\n\nTeraz skompilujmy nasz kod:\n\n```bash\nmkdir build && cd build && cmake ..\nmake\n./Side-ls\n```\n\nA oto output z konsoli:\n\n![cpp_without_modules](/assets/images/cpp20_without_modules.png)\n","slug":"cpp20-modules","published":1,"updated":"2023-10-02T22:40:01.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clna91rjt0001osjm5rao5zke","content":"<p>Witajcie! 🙂<br>W końcu i na mnie przyszła pora na zapoznanie się z feature’mi ze standardu C++20.</p>\n<p>Dzisiaj na pierwszy ogień idą moduły z C++20. Spróbujemy sobie napisać prosty kodzik, który wyświetli nam zawartość aktualnego katalogu (taki ls z shella).</p>\n<h1 id=\"Wersja-bez-modulow\"><a href=\"#Wersja-bez-modulow\" class=\"headerlink\" title=\"Wersja bez modułów\"></a>Wersja bez modułów</h1><p>Na początku spójrzmy na kod napisany bez użycia modułów z C++20. Będą to proste klasy Filesystem i Format, plik main.cpp i cmake.<br>Klasa Filesystem zapewni nam metodę printCurrentDir(), w której do sformatowania wyjścia użyje metody cleanupOutput() z klasy Format.</p>\n<h2 id=\"Kod\"><a href=\"#Kod\" class=\"headerlink\" title=\"Kod\"></a>Kod</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Filesystem.hpp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> FILESYSTEM_HPP_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FILESYSTEM_HPP_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Filesystem</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printCurrentDir</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"keyword\">constexpr</span> <span class=\"keyword\">auto</span> currentPath_ = (<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// FILESYSTEM_HPP_</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Filesystem.cpp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;filesystem&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Format.hpp&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Filesystem.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Filesystem::printCurrentDir</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::vector&lt;std::string&gt; output;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;&amp; entry : std::filesystem::directory_iterator&#123;currentPath_&#125;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        output.<span class=\"built_in\">push_back</span>(entry.<span class=\"built_in\">path</span>().<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Format format;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> results = format.<span class=\"built_in\">cleanupOutput</span>(output);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;&amp; result : results)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; result &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Format.hpp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> FORMAT_HPP_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FORMAT_HPP_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Format</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">std::vector&lt;std::string&gt; <span class=\"title\">cleanupOutput</span><span class=\"params\">(std::vector&lt;std::string&gt;&amp; output)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// FORMAT_HPP_</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Format.cpp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Format.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;std::string&gt; <span class=\"title\">Format::cleanupOutput</span><span class=\"params\">(std::vector&lt;std::string&gt;&amp; output)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::vector&lt;std::string&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::<span class=\"built_in\">transform</span>(output.<span class=\"built_in\">begin</span>(), output.<span class=\"built_in\">end</span>(), output.<span class=\"built_in\">begin</span>(),</span><br><span class=\"line\">        [](std::string entry)&#123; <span class=\"keyword\">return</span> entry.<span class=\"built_in\">substr</span>(<span class=\"number\">2</span>); &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>W pliku <em>main.cpp</em> stworzymy sobie obiekt klasy Tools i wywołamy na nim metodę: <em>printCurrentDir()</em>, która wyświetli nam zawartość aktualnego katalogu.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Filesystem.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Filesystem filesystem;</span><br><span class=\"line\">    filesystem.<span class=\"built_in\">printCurrentDir</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CmakeLists.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">project</span>(Side-ls LANGUAGES CXX)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_STANDARD <span class=\"number\">17</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_FLAGS <span class=\"string\">&quot;-Wall -Wextra&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(tools SHARED</span><br><span class=\"line\">    Filesystem.cpp</span><br><span class=\"line\">    Format.cpp</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(Side-ls main.cpp)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(Side-ls PRIVATE tools)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Kompilacja\"><a href=\"#Kompilacja\" class=\"headerlink\" title=\"Kompilacja\"></a>Kompilacja</h1><p>Teraz skompilujmy nasz kod:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> build &amp;&amp; <span class=\"built_in\">cd</span> build &amp;&amp; cmake ..</span><br><span class=\"line\">make</span><br><span class=\"line\">./Side-<span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p>A oto output z konsoli:</p>\n<p><img src=\"/assets/images/cpp20_without_modules.png\" alt=\"cpp_without_modules\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Witajcie! 🙂<br>W końcu i na mnie przyszła pora na zapoznanie się z feature’mi ze standardu C++20.</p>\n<p>Dzisiaj na pierwszy ogień idą moduły z C++20. Spróbujemy sobie napisać prosty kodzik, który wyświetli nam zawartość aktualnego katalogu (taki ls z shella).</p>\n<h1 id=\"Wersja-bez-modulow\"><a href=\"#Wersja-bez-modulow\" class=\"headerlink\" title=\"Wersja bez modułów\"></a>Wersja bez modułów</h1><p>Na początku spójrzmy na kod napisany bez użycia modułów z C++20. Będą to proste klasy Filesystem i Format, plik main.cpp i cmake.<br>Klasa Filesystem zapewni nam metodę printCurrentDir(), w której do sformatowania wyjścia użyje metody cleanupOutput() z klasy Format.</p>\n<h2 id=\"Kod\"><a href=\"#Kod\" class=\"headerlink\" title=\"Kod\"></a>Kod</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Filesystem.hpp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> FILESYSTEM_HPP_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FILESYSTEM_HPP_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Filesystem</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printCurrentDir</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"keyword\">constexpr</span> <span class=\"keyword\">auto</span> currentPath_ = (<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// FILESYSTEM_HPP_</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Filesystem.cpp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;filesystem&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Format.hpp&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Filesystem.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Filesystem::printCurrentDir</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::vector&lt;std::string&gt; output;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;&amp; entry : std::filesystem::directory_iterator&#123;currentPath_&#125;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        output.<span class=\"built_in\">push_back</span>(entry.<span class=\"built_in\">path</span>().<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Format format;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> results = format.<span class=\"built_in\">cleanupOutput</span>(output);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;&amp; result : results)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; result &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Format.hpp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> FORMAT_HPP_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FORMAT_HPP_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Format</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">std::vector&lt;std::string&gt; <span class=\"title\">cleanupOutput</span><span class=\"params\">(std::vector&lt;std::string&gt;&amp; output)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// FORMAT_HPP_</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Format.cpp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Format.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;std::string&gt; <span class=\"title\">Format::cleanupOutput</span><span class=\"params\">(std::vector&lt;std::string&gt;&amp; output)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::vector&lt;std::string&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::<span class=\"built_in\">transform</span>(output.<span class=\"built_in\">begin</span>(), output.<span class=\"built_in\">end</span>(), output.<span class=\"built_in\">begin</span>(),</span><br><span class=\"line\">        [](std::string entry)&#123; <span class=\"keyword\">return</span> entry.<span class=\"built_in\">substr</span>(<span class=\"number\">2</span>); &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>W pliku <em>main.cpp</em> stworzymy sobie obiekt klasy Tools i wywołamy na nim metodę: <em>printCurrentDir()</em>, która wyświetli nam zawartość aktualnego katalogu.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Filesystem.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Filesystem filesystem;</span><br><span class=\"line\">    filesystem.<span class=\"built_in\">printCurrentDir</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CmakeLists.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">project</span>(Side-ls LANGUAGES CXX)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_STANDARD <span class=\"number\">17</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_FLAGS <span class=\"string\">&quot;-Wall -Wextra&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(tools SHARED</span><br><span class=\"line\">    Filesystem.cpp</span><br><span class=\"line\">    Format.cpp</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(Side-ls main.cpp)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(Side-ls PRIVATE tools)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Kompilacja\"><a href=\"#Kompilacja\" class=\"headerlink\" title=\"Kompilacja\"></a>Kompilacja</h1><p>Teraz skompilujmy nasz kod:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> build &amp;&amp; <span class=\"built_in\">cd</span> build &amp;&amp; cmake ..</span><br><span class=\"line\">make</span><br><span class=\"line\">./Side-<span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p>A oto output z konsoli:</p>\n<p><img src=\"/assets/images/cpp20_without_modules.png\" alt=\"cpp_without_modules\"></p>\n"},{"title":"Wpis inaugurujący blog","date":"2023-09-01T11:38:34.000Z","_content":"\nCześć! Witaj na moim blogu 🙂\nNazywam się Sidewinder22. Jestem programistą języka C++.\n\nPoczątkowo ten blog miał przedstawiać głównie tematy związane z cyberbezpieczeństwem oraz proces nauki tej dziedziny.\nJednak minęło około roku czasu. Blog zmigrował z DigitalOcean na Mikr.US’a, a następnie na Github Pages. A do mnie dotarło, że jednak jestem programistą i chcę się dalej rozwijać jako programista. Napiszę o tym późnij post, aby podpowiedzieć tym, którzy mają podobne rozterki.\n\nBędzie to zatem blog programistyczny, na którym będę dzielił się moim doświadczeniami właśnie na temat nauki programowania. Będą tutorial’e, testy jak i opisy błędów. Na pewno pojawi się też coś o Linuksie (mój natywny OS), różnych językach programowania (C++, Python), samej inżynierii oprogramowania a także o cyberbezpieczeństwie (nie zamierzam się z nim zupełnie rozstawać 😀 ).\n\nŻyczę Wam miłego czytania, jak najmniej crash’y i do zobaczenia w następnym poście! 🙂\n\nTrzymajcie kciuki!\n\nPozdrawiam,\n{\\\\\\_Sidewinder22\\_/}\n","source":"_posts/first-post.md","raw":"---\ntitle: Wpis inaugurujący blog \ndate: 2023-09-01 13:38:34\ntags:\n---\n\nCześć! Witaj na moim blogu 🙂\nNazywam się Sidewinder22. Jestem programistą języka C++.\n\nPoczątkowo ten blog miał przedstawiać głównie tematy związane z cyberbezpieczeństwem oraz proces nauki tej dziedziny.\nJednak minęło około roku czasu. Blog zmigrował z DigitalOcean na Mikr.US’a, a następnie na Github Pages. A do mnie dotarło, że jednak jestem programistą i chcę się dalej rozwijać jako programista. Napiszę o tym późnij post, aby podpowiedzieć tym, którzy mają podobne rozterki.\n\nBędzie to zatem blog programistyczny, na którym będę dzielił się moim doświadczeniami właśnie na temat nauki programowania. Będą tutorial’e, testy jak i opisy błędów. Na pewno pojawi się też coś o Linuksie (mój natywny OS), różnych językach programowania (C++, Python), samej inżynierii oprogramowania a także o cyberbezpieczeństwie (nie zamierzam się z nim zupełnie rozstawać 😀 ).\n\nŻyczę Wam miłego czytania, jak najmniej crash’y i do zobaczenia w następnym poście! 🙂\n\nTrzymajcie kciuki!\n\nPozdrawiam,\n{\\\\\\_Sidewinder22\\_/}\n","slug":"first-post","published":1,"updated":"2023-10-03T11:45:19.985Z","_id":"clna91rju0002osjm3l562v8q","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Cześć! Witaj na moim blogu 🙂<br>Nazywam się Sidewinder22. Jestem programistą języka C++.</p>\n<p>Początkowo ten blog miał przedstawiać głównie tematy związane z cyberbezpieczeństwem oraz proces nauki tej dziedziny.<br>Jednak minęło około roku czasu. Blog zmigrował z DigitalOcean na Mikr.US’a, a następnie na Github Pages. A do mnie dotarło, że jednak jestem programistą i chcę się dalej rozwijać jako programista. Napiszę o tym późnij post, aby podpowiedzieć tym, którzy mają podobne rozterki.</p>\n<p>Będzie to zatem blog programistyczny, na którym będę dzielił się moim doświadczeniami właśnie na temat nauki programowania. Będą tutorial’e, testy jak i opisy błędów. Na pewno pojawi się też coś o Linuksie (mój natywny OS), różnych językach programowania (C++, Python), samej inżynierii oprogramowania a także o cyberbezpieczeństwie (nie zamierzam się z nim zupełnie rozstawać 😀 ).</p>\n<p>Życzę Wam miłego czytania, jak najmniej crash’y i do zobaczenia w następnym poście! 🙂</p>\n<p>Trzymajcie kciuki!</p>\n<p>Pozdrawiam,<br>{\\_Sidewinder22_&#x2F;}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Cześć! Witaj na moim blogu 🙂<br>Nazywam się Sidewinder22. Jestem programistą języka C++.</p>\n<p>Początkowo ten blog miał przedstawiać głównie tematy związane z cyberbezpieczeństwem oraz proces nauki tej dziedziny.<br>Jednak minęło około roku czasu. Blog zmigrował z DigitalOcean na Mikr.US’a, a następnie na Github Pages. A do mnie dotarło, że jednak jestem programistą i chcę się dalej rozwijać jako programista. Napiszę o tym późnij post, aby podpowiedzieć tym, którzy mają podobne rozterki.</p>\n<p>Będzie to zatem blog programistyczny, na którym będę dzielił się moim doświadczeniami właśnie na temat nauki programowania. Będą tutorial’e, testy jak i opisy błędów. Na pewno pojawi się też coś o Linuksie (mój natywny OS), różnych językach programowania (C++, Python), samej inżynierii oprogramowania a także o cyberbezpieczeństwie (nie zamierzam się z nim zupełnie rozstawać 😀 ).</p>\n<p>Życzę Wam miłego czytania, jak najmniej crash’y i do zobaczenia w następnym poście! 🙂</p>\n<p>Trzymajcie kciuki!</p>\n<p>Pozdrawiam,<br>{\\_Sidewinder22_&#x2F;}</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-10-02T22:40:01.563Z","updated":"2023-10-02T22:40:01.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clna91rjx0005osjm9ghn16h8","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clna91rjt0001osjm5rao5zke","tag_id":"clna91rjv0003osjmbjq228o3","_id":"clna91rjx0004osjmd5wphx8z"}],"Tag":[{"name":"c++20 c++","_id":"clna91rjv0003osjmbjq228o3"}]}}